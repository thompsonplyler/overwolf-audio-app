Title: overwolf.io API | Overwolf Developers
Source URL: https://dev.overwolf.com/ow-native/reference/io/ow-io

overwolf.io API
===============

Check whether a certain file exists and/or to write content into files.

tip

For app-related I/O functionalities, use the [overwolf.extensions.io](/ow-native/reference/extensions/io-api) API.
In addition, the [simple I/O plugin](/ow-native/guides/dev-tools/plugins/ow-simple-io-plugin) offers several more general I/O features that are not available through the APIs.

Methods Reference[](#methods-reference "Direct link to Methods Reference")
-----------------------------------------------------------------------------

* [overwolf.io.fileExists()](#fileexistsfilepath-callback)
* [overwolf.io.writeFileContents()](#writefilecontentsfilepath-content-encoding-triggeruacifrequired-callback)
* [overwolf.io.readFileContents()](#readfilecontentsfilepath-encoding-callback)
* [overwolf.io.copyFile()](#copyfilesrc-dst-overridefile-reserved-callback)
* [overwolf.io.dir()](#dirpath-callback)
* [overwolf.io.readBinaryFile()](#readbinaryfilepath-options-callback)
* [overwolf.io.readTextFile()](#readtextfilepath-options-callback)
* [overwolf.io.exist()](#existpath-callback)
* [overwolf.io.listenOnFile()](#listenonfileid-path-option-callback)
* [overwolf.io.stopFileListener()](#stopfilelistenerid)
* [overwolf.io.watchFile()](#watchfilefilepath-callback)
* [overwolf.io.stopWatchingFile()](#stopwatchingfilefilepath-callback)

Types Reference[](#types-reference "Direct link to Types Reference")
-----------------------------------------------------------------------

* [overwolf.io.enums.eEncoding](#eencoding-enum) enum
* [overwolf.io.enums.encoding](#encoding-enum) enum
* [overwolf.io.enums.fileListenerState](#filelistenerstate-enum) enum
* [overwolf.io.ReadFileOptions](#readfileoptions-object) Object
* [overwolf.io.ListenFileOptions](#listenfileoptions-object) Object
* [overwolf.io.DirResult](#dirresult-object) Object
* [overwolf.io.FileExistsResult](#fileexistsresult-object) Object
* [overwolf.io.ReadFileContentsResult](#readfilecontentsresult-object) Object
* [overwolf.io.ListenOnFileResult](#listenonfileresult-object) Object
* [overwolf.io.WatchedFileChanged](#watchedfilechanged-object) Object
* [overwolf.io.enums.WatchEventType](#watcheventtype-enum) enum
* [overwolf.io.ExistsResult](#existsresult-object) Object
* [overwolf.io.ReadBinaryFileResult](#readbinaryfileresult-object) Object
* [overwolf.io.ReadTextFileResult](#readtextfileresult-object) Object
* [overwolf.io.FileInfo](#fileinfo-object) Object
* [overwolf.io.FileInDir](#fileindir-object) Object

Sample app[](#sample-app "Direct link to Sample app")
--------------------------------------------------------

In our [APIs sample apps repository](https://github.com/overwolf/apis-sample-apps), you can find and download a sample app that demonstrates the usage in the IO API:

* The `io-sample` - Demonstrates how to open and load a file to your app, Display it, Add some content, and Write it back to the file.

It's a great place to get started - All the samples in this repository are built with JS code and demonstrate primary usage in the API.

fileExists(filePath, callback)[](#fileexistsfilepath-callback "Direct link to fileExists(filePath, callback)")
-----------------------------------------------------------------------------------------------------------------

#### Version added: 0.93[](#version-added-093 "Direct link to Version added: 0.93")

> Checks for the existence of a file in a given path.

| Parameter | Type | Description |
| --- | --- | --- |
| filePath | string | Path to check for |
| callback | function | Returns the result |
| callback | [(Result: FileExistsResult)](#fileexistsresult-object) => void | Returns with the result |

writeFileContents(filePath, content, encoding, triggerUacIfRequired, callback)[](#writefilecontentsfilepath-content-encoding-triggeruacifrequired-callback "Direct link to writeFileContents(filePath, content, encoding, triggerUacIfRequired, callback)")
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#### Version added: 0.93[](#version-added-093-1 "Direct link to Version added: 0.93")

#### Permissions required: FileSystem[](#permissions-required-filesystem "Direct link to Permissions required: FileSystem")

> Writes content into a target text file.

If the file doesnât exist, it will be created, along with any required directories along the path. Otherwise, the fileâs content will be overwritten.

| Parameter | Type | Description |
| --- | --- | --- |
| filePath | string | Path to check for |
| content | string | Content to write |
| encoding | [eEncoding](#eencoding-enum) enum | Encoding to use |
| triggerUacIfRequired | bool | If additional permissions are required, triggers the Windows UAC dialog |
| callback | (Result) => void | Returns with the result |

readFileContents(filePath, encoding, callback)[](#readfilecontentsfilepath-encoding-callback "Direct link to readFileContents(filePath, encoding, callback)")
----------------------------------------------------------------------------------------------------------------------------------------------------------------

#### Version added: 0.93[](#version-added-093-2 "Direct link to Version added: 0.93")

#### Permissions required: FileSystem[](#permissions-required-filesystem-1 "Direct link to Permissions required: FileSystem")

> Returns a string with the targeted text fileâs content.

| Parameter | Type | Description |
| --- | --- | --- |
| filePath | string | Full path of the targeted file |
| encoding | [eEncoding](#eencoding-enum) enum | Encoding to use |
| callback | [(Result: ReadFileContentsResult)](#readfilecontentsresult-object) => void | Returns the result |

copyFile(src, dst, overrideFile, reserved, callback)[](#copyfilesrc-dst-overridefile-reserved-callback "Direct link to copyFile(src, dst, overrideFile, reserved, callback)")
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#### Version added: 0.93[](#version-added-093-3 "Direct link to Version added: 0.93")

#### Permissions required: FileSystem[](#permissions-required-filesystem-2 "Direct link to Permissions required: FileSystem")

> Copy a file from the local extension directory to a destination in the local machine.

| Parameter | Type | Description |
| --- | --- | --- |
| src | string | A relative file path from your extension's root folder, or a full overwolf-extension:// URI to the source file |
| dst | string | Destination absolute path to copy to including filename. See usage example below |
| overrideFile | bool | "true" if you want an existing file to be overwritten, "false" otherwise |
| reserved | bool | For future use |
| callback | (Result) => void | Returns with the result |

#### Usage example[](#usage-example "Direct link to Usage example")

```
overwolf.io.copyFile("Fortnite Battle Royale 03-19-2020 14-10-18-457.mp4","C:/Users/Hal9000/AppData/Local/Overwolf/Extensions/nhmkaollkcmjiecdnnjmgfifjgkfegkljnjjbipp/1.0.18/copy.mp4",false,false,console.log)  
  

```

dir(path, callback)[](#dirpath-callback "Direct link to dir(path, callback)")
--------------------------------------------------------------------------------

#### Version added: 0.141[](#version-added-0141 "Direct link to Version added: 0.141")

#### Permissions required: FileSystem[](#permissions-required-filesystem-3 "Direct link to Permissions required: FileSystem")

> Lists all files and folder in the target path.

| Parameter | Type | Description |
| --- | --- | --- |
| path | string | The target path |
| callback | [(Result: DirResult)](#dirresult-object) => void | Returns with the result |

#### Usage example[](#usage-example-1 "Direct link to Usage example")

```
overwolf.io.dir("C:/Users/Hal9000/Videos/Overwolf",console.log)  

```

readBinaryFile(path, options, callback)[](#readbinaryfilepath-options-callback "Direct link to readBinaryFile(path, options, callback)")
-------------------------------------------------------------------------------------------------------------------------------------------

#### Version added: 0.141[](#version-added-0141-1 "Direct link to Version added: 0.141")

#### Permissions required: FileSystem[](#permissions-required-filesystem-4 "Direct link to Permissions required: FileSystem")

> Read binary file.

Reads a file's contents and returns an array of byte values.  
This function is extremely slow! Use it only for small files or to get file header info using the [options](#readfileoptions-object) parameter (maxBytesToRead) to limit the amount of data to fetch.

| Parameter | Type | Description |
| --- | --- | --- |
| path | string | The target path |
| options | [ReadFileOptions](#readfileoptions-object) object |  |
| callback | [(Result: ReadBinaryFileResult)](#readbinaryfileresult-object) => void | Returns with the result |

readTextFile(path, options, callback)[](#readtextfilepath-options-callback "Direct link to readTextFile(path, options, callback)")
-------------------------------------------------------------------------------------------------------------------------------------

#### Version added: 0.141[](#version-added-0141-2 "Direct link to Version added: 0.141")

#### Permissions required: FileSystem[](#permissions-required-filesystem-5 "Direct link to Permissions required: FileSystem")

> Read text file.

Reads a file's contents and returns it as text.

| Parameter | Type | Description |
| --- | --- | --- |
| path | string | The target path |
| options | [ReadFileOptions](#readfileoptions-object) object |  |
| callback | [(Result: ReadTextFileResult)](#readtextfileresult-object) => void | Returns with the result |

exist(path, callback)[](#existpath-callback "Direct link to exist(path, callback)")
--------------------------------------------------------------------------------------

#### Version added: 0.141[](#version-added-0141-3 "Direct link to Version added: 0.141")

#### Permissions required: FileSystem[](#permissions-required-filesystem-6 "Direct link to Permissions required: FileSystem")

> Is path exist.

| Parameter | Type | Description |
| --- | --- | --- |
| path | string | The target path |
| callback | [(Result: ExistsResult)](#existsresult-object) => void | Returns with the result |

listenOnFile(id, path, option, callback)[](#listenonfileid-path-option-callback "Direct link to listenOnFile(id, path, option, callback)")
---------------------------------------------------------------------------------------------------------------------------------------------

#### Version added: 0.141[](#version-added-0141-4 "Direct link to Version added: 0.141")

#### Permissions required: FileSystem[](#permissions-required-filesystem-7 "Direct link to Permissions required: FileSystem")

> Start listening on file.

Stream a file (text files only), line-by-line, from the local filesystem.

| Parameter | Type | Description |
| --- | --- | --- |
| id | string | listen Id |
| path | string | file path |
| options | [ListenFileOptions](#listenfileoptions-object) Object |  |
| callback | [(Result: ListenOnFileResult)](#listenonfileresult-object) => void | Returns with the result |

#### Usage example[](#usage-example-2 "Direct link to Usage example")

```
overwolf.io.listenOnFile('test.txt','C:\\test\\test.txt', {},console.log)  

```

stopFileListener(id)[](#stopfilelistenerid "Direct link to stopFileListener(id)")
------------------------------------------------------------------------------------

#### Version added: 0.141[](#version-added-0141-5 "Direct link to Version added: 0.141")

#### Permissions required: FileSystem[](#permissions-required-filesystem-8 "Direct link to Permissions required: FileSystem")

> Stop listening on file.

Stop streaming a file that you previously passed when calling [listenOnFile](#listenonfileid-path-option-callback).  
There are no callbacks - as this will never fail (even if the stream doesn't exist).

| Parameter | Type | Description |
| --- | --- | --- |
| id | string | listen Id |

#### stopFileListener notes[](#stopfilelistener-notes "Direct link to stopFileListener notes")

On stop, [listenOnFile](#listenonfileid-path-option-callback) callback will trigger with a "truncated" state:

```
{  
    "success" : true,   
    "error": "",   
    "state": "truncated"   
    ...  
}  

```

watchFile(filePath, callback)[](#watchfilefilepath-callback "Direct link to watchFile(filePath, callback)")
--------------------------------------------------------------------------------------------------------------

#### Version added: 0.208[](#version-added-0208 "Direct link to Version added: 0.208")

> Watches a file for **any** changes that occur to its content.

| Parameter | Type | Description |
| --- | --- | --- |
| filePath | string | Path to the file to watch |
| callback | [(Result: WatchedFileChanged)](#watchedfilechanged-object) => void | Callback that is called upon registering, and on every subsequent file change |

#### Note[](#note "Direct link to Note")

File changes will be listened to forever, unless:

* The file is renamed/deleted. In which case, the listener will be notified of the change, and will then stop.
* File watching on this file is closed, via [`overwolf.io.stopWatchingFile()`](#stopwatchingfilefilepath-callback)

stopWatchingFile(filePath, callback)[](#stopwatchingfilefilepath-callback "Direct link to stopWatchingFile(filePath, callback)")
-----------------------------------------------------------------------------------------------------------------------------------

#### Version added: 0.208[](#version-added-0208-1 "Direct link to Version added: 0.208")

> Stops watching the specified file

| Parameter | Type | Description |
| --- | --- | --- |
| filePath | string | Path to the file to stop watching |
| callback | (Reuslt) => void | Callback that is called with the result of the stop operation |

fileListenerState enum[](#filelistenerstate-enum "Direct link to fileListenerState enum")
--------------------------------------------------------------------------------------------

File listener state.

| Options |
| --- |
| started |
| running |
| terminated |
| truncated |

encoding enum[](#encoding-enum "Direct link to encoding enum")
-----------------------------------------------------------------

encoding types.

| Options |
| --- |
| Default |
| UTF8 |
| UTF32 |
| Unicode |
| UTF7 |
| ASCII |
| BigEndianUnicode |

eEncoding enum[](#eencoding-enum "Direct link to eEncoding enum")
--------------------------------------------------------------------

File encoding.

| Options |
| --- |
| UTF8 |
| UTF8BOM |
| Unicode |
| UnicodeBOM |
| ASCII |

ReadFileOptions Object[](#readfileoptions-object "Direct link to ReadFileOptions Object")
--------------------------------------------------------------------------------------------

#### Version added: 0.141[](#version-added-0141-6 "Direct link to Version added: 0.141")

> Describes the different options to read a file.

| Parameter | Type | Description |
| --- | --- | --- |
| encoding | [eEncoding](#eencoding-enum) enum |  |
| maxBytesToRead | int | default is 0 => read all file |
| offset | int | start reading point, default is 0 |

ListenFileOptions Object[](#listenfileoptions-object "Direct link to ListenFileOptions Object")
--------------------------------------------------------------------------------------------------

#### Version added: 0.141[](#version-added-0141-7 "Direct link to Version added: 0.141")

> Describes the different options to listen to a file.

| Parameter | Type | Description |
| --- | --- | --- |
| skipToEnd | bool | should skip directly to end of file. default if false |
| encoding | [encoding](#encoding-enum) enum | Encoding to use. `Default` is is the default value |

ListenOnFileResult Object[](#listenonfileresult-object "Direct link to ListenOnFileResult Object")
-----------------------------------------------------------------------------------------------------

#### Version added: 0.141[](#version-added-0141-8 "Direct link to Version added: 0.141")

> Returned when subscribing to listen to a file.

| Parameter | Type | Description |
| --- | --- | --- |
| content | string | The current content of the file |

WatchedFileChanged Object[](#watchedfilechanged-object "Direct link to WatchedFileChanged Object")
-----------------------------------------------------------------------------------------------------

#### Version added: 0.208[](#version-added-0208-2 "Direct link to Version added: 0.208")

> Returned when a watched file is changed (as well as when subscribing).

| Parameter | Type | Description |
| --- | --- | --- |
| eventType | [WatchEventType](#watcheventtype-enum) | The type of change that occured |
| path | string | The current path of the file |
| newPath (optional) | string | The new file path. Only returned when `eventType` is `Renamed`. |

WatchEventType Enum[](#watcheventtype-enum "Direct link to WatchEventType Enum")
-----------------------------------------------------------------------------------

#### Version added: 0.208[](#version-added-0208-3 "Direct link to Version added: 0.208")

> The type of change observed on a watched file.

| Options |
| --- |
| Registered |
| Changed |
| Renamed |
| Deleted |

DirResult Object[](#dirresult-object "Direct link to DirResult Object")
--------------------------------------------------------------------------

#### Version added: 0.141[](#version-added-0141-9 "Direct link to Version added: 0.141")

> List of files and folders.

| Parameter | Type | Description |
| --- | --- | --- |
| success | boolean | Inherited from the "Result" Object |
| error | string | Inherited from the "Result" Object |
| data | [FileInDir](#fileindir-object)[] | List of files and folders |

#### Example data[](#example-data "Direct link to Example data")

```
{  
   "success":true,  
   "path":"C:/Users/Hal9000/Videos/Overwolf",  
   "data":[  
      {  
         "name":"Fortnite 03-19-2020 17-15-56-087.mp4",  
         "type":"file"  
      },  
      {  
         "name":"Game Events Simulator",  
         "type":"dir"  
      },  
      {  
         "name":"Game Summary",  
         "type":"dir"  
      }  
  
   ]  
}  

```

FileExistsResult Object[](#fileexistsresult-object "Direct link to FileExistsResult Object")
-----------------------------------------------------------------------------------------------

#### Version added: 0.141[](#version-added-0141-10 "Direct link to Version added: 0.141")

> The result.

| Parameter | Type | Description |
| --- | --- | --- |
| success | boolean | Inherited from the "Result" Object |
| error | string | Inherited from the "Result" Object |
| found | boolean | Return if the file exist or not |

#### Example data[](#example-data-1 "Direct link to Example data")

```
{  
   "success":true,  
   "found":true  
}  

```

ReadFileContentsResult Object[](#readfilecontentsresult-object "Direct link to ReadFileContentsResult Object")
-----------------------------------------------------------------------------------------------------------------

#### Version added: 0.141[](#version-added-0141-11 "Direct link to Version added: 0.141")

> the status of the request and the file contect.

| Parameter | Type | Description |
| --- | --- | --- |
| success | boolean | Inherited from the "Result" Object |
| error | string | Inherited from the "Result" Object |
| content | string | string with the taraget fileâs content |

#### Example data[](#example-data-2 "Direct link to Example data")

```
{"success":true,"content":"Hello World!"}  

```

ListenOnFileResult Object[](#listenonfileresult-object-1 "Direct link to ListenOnFileResult Object")
-------------------------------------------------------------------------------------------------------

#### Version added: 0.141[](#version-added-0141-12 "Direct link to Version added: 0.141")

> The result.

| Parameter | Type | Description |
| --- | --- | --- |
| success | boolean | Inherited from the "Result" Object |
| error | string | Inherited from the "Result" Object |
| state | string | Current callback state. Only valid only when "success" is true [overwolf.io.enums.fileListenerState](#filelistenerstate-enum) |
| content | string | string with the taraget line content |

#### Example data[](#example-data-3 "Direct link to Example data")

```
{  
    "success" : true, // when false the callback will stop listen  
    "error": "", // valid only when success = false  
    "state": "started|running|terminated|truncated", // valid only when success =true (overwolf.io.enums.fileListenerState)   
    "content": "" //the line    
}  

```

#### notes[](#notes "Direct link to notes")

* "state" is from type [overwolf.io.enums.fileListenerState](#filelistenerstate-enum).
* Please read what happens when you call [stopFileListener()](#stopfilelistener-notes).

ExistsResult Object[](#existsresult-object "Direct link to ExistsResult Object")
-----------------------------------------------------------------------------------

#### Version added: 0.141[](#version-added-0141-13 "Direct link to Version added: 0.141")

> The result.

| Parameter | Type | Description |
| --- | --- | --- |
| success | boolean | Inherited from the "Result" Object |
| error | string | Inherited from the "Result" Object |
| exist | boolean | Return if the file exist or not |

#### Example data[](#example-data-4 "Direct link to Example data")

```
{  
   "success":true,  
   "exist":true  
}  

```

ReadBinaryFileResult Object[](#readbinaryfileresult-object "Direct link to ReadBinaryFileResult Object")
-----------------------------------------------------------------------------------------------------------

#### Version added: 0.141[](#version-added-0141-14 "Direct link to Version added: 0.141")

> The result.

| Parameter | Type | Description |
| --- | --- | --- |
| success | boolean | Inherited from the "Result" Object |
| error | string | Inherited from the "Result" Object |
| content | string | Return with the file content |
| info | [FileInfo](#fileinfo-object) object | Return with the file content |

#### Example data[](#example-data-5 "Direct link to Example data")

```
 {  
    "success" : true,  
    "error": "",   
    "content": byte[], // the file content in bytes  
    "info" : {  
        "eof" : true, // is EOF  
        "totalRead" : 3000, // total read bytes  
        "position" : 3000, // last file position  
        "totalLines" :100, // total read lines  
    }  
}  

```

ReadTextFileResult Object[](#readtextfileresult-object "Direct link to ReadTextFileResult Object")
-----------------------------------------------------------------------------------------------------

#### Version added: 0.141[](#version-added-0141-15 "Direct link to Version added: 0.141")

> The result.

| Parameter | Type | Description |
| --- | --- | --- |
| success | boolean | Inherited from the "Result" Object |
| error | string | Inherited from the "Result" Object |
| content | string | Return with the file content |
| info | [FileInfo](#fileinfo-object) object | Return with the file content |

#### Example data[](#example-data-6 "Direct link to Example data")

```
 {  
    "success" : true,  
    "error": "",   
    "content": byte[], // the file content in bytes  
    "info" : {  
        "eof" : true, // is EOF  
        "totalRead" : 3000, // total read bytes  
        "position" : 3000, // last file position  
        "totalLines" :100, // total read lines  
    }  
}  

```

FileInfo Object[](#fileinfo-object "Direct link to FileInfo Object")
-----------------------------------------------------------------------

#### Version added: 0.141[](#version-added-0141-16 "Direct link to Version added: 0.141")

> Container for the file info properties.

| Parameter | Type | Description |
| --- | --- | --- |
| success | boolean | Inherited from the "Result" Object |
| error | string | Inherited from the "Result" Object |
| eof | boolean |  |
| totalRead | number |  |
| position | number |  |
| totalLines | number |  |

FileInDir Object[](#fileindir-object "Direct link to FileInDir Object")
--------------------------------------------------------------------------

#### Version added: 0.141[](#version-added-0141-17 "Direct link to Version added: 0.141")

> Container for the list of files and folders in a directory.

| Parameter | Type | Description |
| --- | --- | --- |
| success | boolean | Inherited from the "Result" Object |
| error | string | Inherited from the "Result" Object |
| name | string |  |
| type | string |  |

#### Example data[](#example-data-7 "Direct link to Example data")

```
{  
   "name":"Fortnite 03-19-2020 17-15-56-087.mp4",  
   "type":"file"  
}  

```